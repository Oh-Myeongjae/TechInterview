추상 클래스는 상속을 통해 부모 클래스로부터 기능을 확장한 자식 클래스를 생성하기 위해 사용합니다. 
그렇기 때문에 다중 상속시 동일한 메서드가 존재한다면 어떤 메서드를 실행시켜야 할지 모호하여 다중상속을 할 수 없습니다.
이것이 다중 상속의 모호성이고, 이 때문에 Java는 다중 상속을 막아 놓았다.

Interface는 부모, 자식 관계인 상속 관계에 얽메이지 않고, 공통 기능이 필요 할때, 
Abstract Method를 정의해놓고 구현(implements)하는 Class에서 각 기능들을 Overridng하여 여러가지 형태로 구현할 수 있기에 다형성과 연관되어 있다.

Interface는 해당 Interface를 구현하는 Class들에 대해 동일한 method, 동작을 강제하기 위해 존재한다.
Java에서 다중 상속이 안되어 발생하는 Abstract Class의 한계도 보완해줄 수 있다.
Interface의 implements에는 제한이 없어 다중 구현이 가능하다.

하지만 모든 Class가 Interface를 이용한다면, 공통적으로 필요한 기능도 implements하는 모든 Class에서 Overrindg해 재정의해야 하는 번거로움이 존재한다. 
