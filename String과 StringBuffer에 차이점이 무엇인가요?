모두 문자열을 다루는 클래스 (++ StringBuidler) 
연산이 많아지거나 멀티쓰레드, Race conditon등 상황이 자주발생한다면 구분이필요,

String은 불변의 속성을 가지고 있어 메모리영역은 남아있다가 Garbage collection에 의해 사라지게 된다.
예시) String str = “hello’;         << 메모리에 남아있음 (이후 가비지에서 삭제대상)
         str = str+ “world”;          << 새로운 메모리
  위와 같이 진행하더라도 새로운 메모리영역을 생성함.
그래서 문자열 추가, 수정 ,삭제가 빈번히 일어난다면! 많은 힙(Heap)메모리가 생성, 많은 가비지가 생성되어 성능에 악영향을 끼침

그래서 가변 속성을 가진 StringBuffer / StringBuilder를 사용한다!
StringBuffer sb = new StringBuffer(”hello”);  <<  동일한 메모리
              sb.append(”world);      <<  동일한 메모리

++ 추가적으로 StringBuffer vs StringBuilder 
동기화의 유무 / StringBuffer는 동기화 키워드 지원하여 멀티쓰레드에서 안정성
   StringBuilder는 동기화 x, 하지만 싱글쓰레드에서 사용한다면 성능이 더좋다       

결론 : 
String    :  문자열 연산이 적고 멀티쓰레드 환경
StringBuffer  :  문자열 연산이 많고 멀티쓰레드 환경
StringBuilder   :  문자열 연산이 많고 단일쓰레드, 동기화를 고려X 
